package controllers;

import com.typesafe.config.ConfigFactory;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import play.Logger;
import play.mvc.*;
import play.mvc.Http.MultipartFormData;
import play.mvc.Http.MultipartFormData.FilePart;
import static play.mvc.Results.badRequest;
import static play.mvc.Results.internalServerError;
import static play.mvc.Results.ok;
//import org.apache.tools.ant.Project;
//import org.apache.tools.ant.Target;
//import org.apache.tools.ant.taskdefs.Expand;

import views.html.*;

public class Application extends Controller {

    public static Result index() {
        return ok(index.render("Your new application is ready."));
    }

    public static Result upload() {
        Logger.info("Upload");
        MultipartFormData body = request().body().asMultipartFormData();
        FilePart uploadedFile = body.getFile("upload");
        if (uploadedFile != null) {
            String fileName = uploadedFile.getFilename() + "_download";
            String contentType = uploadedFile.getContentType();
            File file = uploadedFile.getFile();
            if (isValidatedFile(file)) {
                File fileOtherName = new File(fileName);
                file.renameTo(fileOtherName);
                return sendResignedJarBack(file);
            } else {
                Logger.info("Not Validated File");
                return badRequest();
            }
        } else {
            flash("error", "Missing file");
            return redirect(routes.Application.index());
        }
    }

    private static boolean isValidatedFile(File file) {
        Project project = new Project();
        String keystorePath = ConfigFactory.load("certificate.conf").getString("de.cismet.keystore.path");
        String keystorePW = ConfigFactory.load("certificate.conf").getString("de.cismet.keystore.pass");
        String keystoreAlias = ConfigFactory.load("certificate.conf").getString("de.cismet.keystore.alias");
        Logger.info("checking file for: " + keystorePath + " - " + keystorePW + " - " + keystoreAlias);        
        JarVerifier verifier = new JarVerifier();
        return verifier.isSigned(file, keystorePath, keystorePW, keystoreAlias, true, true);
    }
//    
//    private static void resignJar(File file) {
//        LOG.fatal("Not supported yet.", new Exception());
//        return null;
//    }

    private static Result sendResignedJarBack(File file) {
        Logger.info("Send File back");
        try {
            return ok(new FileInputStream(file));
        } catch (FileNotFoundException ex) {
            return badRequest();
        }
    }
    
    /*static public void unzip(String zipFilepath, String destinationDir) {
    final class Expander extends Expand {
        public Expander() {
 	    project = new Project();
	    project.init();
	    taskType = "unzip";
	    taskName = "unzip";
	    target = new Target();
	}	
    }
    Expander expander = new Expander();
    expander.setSrc(new File(zipfile));
    expander.setDest(new File(destdir));
    expander.execute();
    }*/
}
